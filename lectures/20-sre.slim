=slide 'SRE' do
  p Site Reliability Engineering (SRE)
  p Дисциплина в софтуерното инженерство, която има за цел създаването на скалируеми (scalable) и високо надежни (reliable) системи.
  p Фокусът обикновено е по-скоро върху интернет услуги, но много принципи са общовалидни.

=slide 'Светът е голям и опасности дебнат отвсякъде' do
  p Практически е почти невъзможно създаването на напълно надежден софтуер.
  ul
    li Бъгав код. Това е най-честата причина за счупвания.
    li Проблеми с хардуера. Случвват се рядко, но се случват.
    li Пренатоварване на системите.
    li Unavailable dependencies.
    li Катаклизми; спиране на тока; ядрена война.

=slide 'Availablity' do
  p Един от най-стандартните начини да измерваме колко е надежден софтуера ни е неговото availability:
  ul
    li Time-based availability (uptime): availability = uptime / (uptime + downtime)
    li Aggregate availability: availabilty = successful requests / (total requests)

  p Друга важна метрика е latency, т.е. забавянето между действието на потребителя и получаването на резултат.

=slide 'Икономика на грешките' do
  p Работат по SRE е игра на баланс между различни цени, които трябва да платите.
  ul
    li От една страна е загубата, която претърпявате задето предоставяте ненадеждна услуга: финансови загуби, недоволни клиенти, загуба на доверие и т.н.
    li От друга, времето, което прекарвате за подобряване на вашето reliability е време, което не прекарвате в създаване на нови feature-и.

=slide 'Сизиф' do
  ul
    li Ненадеждния софтуер налага често да му обръщате внимание.
    li Тези постоянни, непредвидени задачки вредят много на производителността ви.

=slide 'SLI, SLO & SLA' do
  ul
    li Service-Level Indicators
    li Service-Level Objectives
    li Service-Level Agreements

=slide 'Error budgeting' do
  p Когато знаем какво ниво на availability целим да постигнем, можем да сметнем какъв бюджет за грешки ни е допустим за определен период.
  p За всяка деградация или срив можем да оценим колко процента от бюджета ни е бил изразходван.

=slide 'Monitoring' do
  p За да знаем какво се случва със системите ни, събираме, обработваме, агрегираме и показваме разнообразни данни <b>в реално време</b>.
  ul
    li White-box monitoring - Вътрешно-системни метрики, като например: CPU usage, Memory usage, вътрешни статистики и тн.
    li Black-box monitoring - Следене на метрики, измерващи поведението на системата от гледна точка на потребителя: брой заявки, брой системни грешки и тн.

=slide 'Monitoring' do
  p Защо?
  ul
    li Alerting - Своевременно уведомяване за проблеми.
    li Ретроспективен анализ и дебъгване.
    li Сравняване (Последната промяна на кода ми, подобри или влоши latency-то на системата?)
    li Следене на дългосрочни трендове.

=slide 'Табла (Dashboards)' do
  img src="20/grafana_dashboard.png"

=slide 'Alerting' do
  ul
    li Автоматична система следи метриките в реално време.
    li При преминаване на определени (предварително зададени) граници ви уведомява.
    li В зависимост от настройката и критичността, уведомлението може да чат, имейл, SMS, телефонно обадждане, page и тн.

=slide 'Releases' do
  p Release-а винаги е рискован и особено критичен момент.
  p Някои добри практики:
  ul
    li Тестване
    li Код ревюта
    li CI
    li Source-control & release branches
    li Canary release

=slide 'Blameless postmortems' do
  p Добра практика е след всяка по-значителна деградация да се напише документ, който анализира какъв е бил проблемам, какви са щетите и как може да се предотврати.

=slide 'Simplicity' do
  p "Съвършенството е достигнато не когато няма какво повече да се добави, а когато няма какво да се премахне."
  p.action -Антоан дьо Сент-Екзюпери

=slide 'Още материали' do
  ul
    li <a href="Google's Site Reliability Engineering online book">https://landing.google.com/sre/sre-book/toc/index.html</a>
