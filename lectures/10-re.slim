= slide "За какво ще си говорим днес" do
    list:
        Очевидно, регулярни изрази
        С какво ще ни улеснят живота -- в и извън рамките на Python


= slide "Проблематика " do
    p Работа с низове:
    list:
        Търсене на по-сложна последователност от символи в низ
        Заместване на такива последователности с нещо друго
        Проверка дали даден низ отговаря на определени условия


= slide "Примерни проблеми -- много " do
    list:
      Често срещано: извличане на информация от текстови и markup-документи
      Искаме да проверим дали даден низ съдържа валиден телефонен номер
    p Това означава:
    list:
        Трябва да съдържа само цифри
        Може да започва с код на населеното място: <em>02</em>, <em>032</em> или <em>052</em>
        След кода, дължината му може да е между 5 и 7 цифри
        Самият номер (след кода) не може да започва с 0, 1, 2, 3 или 4
        Затворете очи...
        Виждате ли редовете код вече?


= slide "Вариант за решение " do
    example:
        def validate_phone_str(number):
            if '02' == number[:2]:
                return validate_phone_str(number[2:])
            elif number[:3] in {'032', '052'}:
                return validate_phone_str(number[3:])
            if all([c.isdigit() for c in number]):
                return 5 <= len(number) <= 7
            return False
    list:
        Бъгав...

= slide "Втори вариант за решение " do
    example:
        def validate_phone_re(number):
            pattern = r'^(02|032|052)?[5-9]\d{4,6}$'
            return bool(re.search(pattern, number))
    list:
        Cooler, eh?
        Ще се заемем да разучим този втори вариант


= slide "Понятия " do
    list:
        Основно: "шаблон" (pattern), още "регулярен израз"
        Специални (meta) символи
        Екраниране (escape-ване) на специалните символи


= slide "Регулярните изрази в контекста на Пайтън " do
    list:
        <em>import re</em> -- модулът, реализиращ PCRE-функционалността
        Escape-ване на специални символи: чрез <em>\</em>
        За задаване на шаблоните обикновено се ползват raw-низовете
        Пример: <em>r'\s+'</em>


= slide "Задаване на шаблон " do
    list:
         Всеки символ, освен някои специални, означава себе си.
         Цялата магия е в специалните символи: <p><em>. \| ( ) [ ] { } + \ ^ $ * ?</em></p>
         <em>\</em> пред специален символ го прави неспециален такъв.


= slide "Нашата помощна функция matcher" do
    list:
        Примерите ще демонстрираме чрез наша функция <em>matcher()</em>.
        Не е част от стандартната библиотека на Python :)
        Ще ви покажем 4-те й реда код по-късно.
        Сигнатура: <em>matcher(pattern, string)</em>.


= slide "Пример"  do
    example:
        >>> matcher('pat', 'Find a pattern.')
        'Find a (pat)tern.'
        >>> matcher('#', 'What ###?')
        'What (#)##?'


= slide "Магия от level 1 -- Повторения (quantifiers) " do
    p Важат за непосредствено предхождащия ги символ/клас/група. Нека го означим с <em>s</em>.
    list:
        <em>s*</em> означава нула или повече повторения на <em>s</em>.
        <em>s+</em> търси едно или повече повторения на <em>s</em>.
        <em>s?</em> съвпада с нула или едно повторение на <em>s</em>.
        <em>s{m,n}</em> означава между <em>m</em> и <em>n</em> повторения на <em>s</em>, където можем да пропуснем <em>m</em> или <em>n</em>. <em>s{,n}</em> има смисъл на нула до <em>n</em> повторения, а <em>s{m,}</em> &mdash; поне <em>m</em> повторения.`

= slide "Примери " do
    example:
        matcher('o+', 'Goooooooogle')           # 'G(oooooooo)gle'
        matcher('[hH]o+', 'Hohohoho...')        # '(Ho)hohoho...'
        # Хм. Не искахме точно това. По-скоро:
        matcher('([hH]o)+', 'Hohohoho...')      # '(Hohohoho)...'
        matcher('([hH]o){2,3}', 'Hohohoho...')  # '(Hohoho)ho...'

= slide "Примери" do
    p По подразбиране - алчно търсене за съвпадение (greedy). Деактивира се с <em>?</em> след квантора.
    example:
        matcher('[hH]o+', 'Hoooooohohooo...')   # '(Hoooooo)hohooo...'
        matcher('[hH]o+?', 'Hoooooohohooo...')  # '(Ho)ooooohohooo...'

= slide "Скоби и групиране" do
    p Символите <em>(</em> и <em>)</em> се използват за логическо групиране на части от шаблона с цел:
    list:
        Контролиране областта на влияние на дадена операция
        Възможност за референция към "ограденото" в скобите
        Задаване на по-специални (и не толкова често употребявани) конструкции
    p Повече за групите -- след малко.

= slide "Значения на специалните символи " do
    list:
        <em>.</em> съвпада с един произволен символ. По подразбиране символите за нов ред не се включват в тази група.
        <em>^</em> съвпада с началото на низ (или на ред, ако се работи в MULTILINE режим.)
        <em>$</em> съвпада с края на низ (или на ред, ако се работи в MULTILINE режим.)

= slide "Значения на специалните символи " do
    list:
        <b>|</b> има смисъл на или, например:
    example:
        matcher('day|nice', 'A nice dance-day.')   # 'A (nice) dance-day.'
        matcher('da(y|n)ce', 'A nice dance-day.')  # 'A nice (dance)-day.'
    p NB! Единствено <code>|</code> се прилага не над непосредствените му символи/класове, а на целия низ отляво/отдясно:
    example:
        matcher('ab|c|e', 'abcdef')     # '(ab)cdef'
        matcher('am|c|e', 'abcdef')     # 'ab(c)def'
        matcher('a(m)|c|e', 'abcdef')   # 'ab(c)def'


= slide "Магия от level 2 (DRY) -- Символни класове " do
    list:
        Набор от символи, заграден от <em>[</em> и <em>]</em>, например <em>[aeoui]</em>.
        Съвпадат с точно един от символите, описани в класа, например:
    example:
        >>> matcher('[aeoui]', 'Google')
        'G(o)ogle'
    list:
        Отрицание на клас -- посредством <em>^</em> в началото на класа:
    example:
        matcher('[^CBL][aeoui]', 'Cobol')  # 'Co(bo)l'
    list:
        Диапазони от символи:
    example:
        >>> matcher('[0-9]{1,3}-[a-z]', 'Figure 42-b')
        'Figure (42-b)'
        >>> matcher('[^a-zA-Z-]', 'Figure-42-b')
        'Figure-(4)2-b'

= slide "Предефинирани класове " do
    list:
        <em>\d</em> -- една цифра; същото като <em>[0-9]</em>.
        <em>\D</em> -- един символ, който не е цифра; същото като <em>[^0-9]</em>.
        <em>\s</em> -- един whitespace символ -- <em>[\t\r\n\f\v]</em>.
        <em>\S</em> -- един символ, който не е whitespace -- <em>[^\t\r\n\f\v]</em>.
        <em>\w</em> -- една буква или цифра.
        <em>\W</em> -- един символ, който не е буква или цифра.
        <em>\b</em> -- нула символа, но граница на дума.
        И други.


= slide "Примери за употреба на класове " do
    example:
        matcher(r'\d+', 'Phone number: 5551234')
        # 'Phone number: (5551234)'
        matcher(r'\w+', 'Phone number: 5551234')
        # '(Phone) number: 5551234'
        matcher(r'\s+', 'Phone number: 5551234')
        # 'Phone( )number: 5551234'


= slide "Gandalf The Gray -- Групи " do
    list:
        Групите са частите от даден шаблон, оградени в <em>(</em> и <em>)</em>.
        Към тях можем да се обръщаме и от самия шаблон чрез специалните класове <em>\1</em> &mdash; първата група, <em>\2</em> &mdash; втората и така нататък.
        Няколко примера:
    example:
        matcher(r'(\w+).*\1', 'Matches str if str repeats one of its words.');
        'M(atches str if str repeat)s one of its words.'

        # Хм. Не точно. Нека опитаме пак:
        matcher(r'(\b\w+\b).*\1', 'Matches str if str repeats one of its words.');
        'Matches (str if str) repeats one of its words.'

= slide "Групи за напреднали (Gandalf The White) " do
    list:
        <em>(?:...)</em>            -- използване на скоби, без да се създава група.
        <em>(?P<name>...)</em>      -- текстът, отговарящ на групата, може да бъде достъпван чрез име, вместо чрез номер.
        <em>(?P=name)</em>          -- търси съвпадение за текста, намерен по-рано от групата, кръстена <em>name</em>.
        <em>(?#...)</em>            -- коментар, игнорира се.
        <em>(?=...)</em>            -- съвпада, ако ... следва, но не го "консумира" (look-ahead).
        <em>(?!...)</em>            -- съвпада, ако ... не следва.
        <em>(?(id/name)yes|no)</em> -- търси за шаблона 'yes', ако групата с номер/име съвпада, или с (опционалния) шаблон 'no' иначе.
        Още: <em>help(re)</em>


= slide "Методи на модула re" do
    list:
        <em>re.search()</em> -- проверява дали даден низ съдържа текст, отговарящ на зададения шаблон
        <em>re.match()</em> -- същото както горното, само че се търси за съвпадение в началото на низа
        <em>re.findall()</em> -- връща като списък всички съвпадения на шаблона в дадения низ
        <em>re.finditer()</em> -- същото като горното, но връща итератор


= slide "Методи на модула re (2) " do
    list:
        <em>re.sub(pattern, repl, string, count=0)</em> -- заместване в низ, на база на шаблон
        <em>re.split(pattern, string, maxsplit=0)</em> -- разделяне на низ на парчета, на база на шаблон
        <em>re.escape(pattern)</em> -- escape-ва всички специални за регулярен израз символи
        Пример: <em>re.escape('a(a)\s+')</em> ще върне <em>'a\\(a\\)\\\\s\\+'</em>
        Още: <em>help(re)</em>


= slide "MatchObject " do
    list:
        <em>group()</em> -- връща частта от низа, отговаряща на шаблона (и още...)
        <em>start()</em> -- връща началото на съвпадението в низа
        <em>end()</em> -- връща края на съвпадението в низа
        <em>span()</em> -- връща (start, end) под формата на tuple


= slide "Флагове " do
    list:
        <em>re.I</em> (re.IGNORECASE) &mdash; case-insensitive търсене.
        <em>re.L</em> (re.LOCALE)     &mdash; кара \w, \W, \b, \B да зависят от текущия locale.
        <em>re.M</em> (re.MULTILINE)  &mdash; кара "^" да съвпада както с начало на низ, така и с начало на ред, докато "$" ще съвпада с край на ред или края на низа.
        <em>re.S</em> (re.DOTALL)     &mdash; "." ще съвпада с всеки символ, включително и нов ред.
        <em>re.X</em> (re.VERBOSE)    &mdash; режим на игнориране на white-space и коментари (за по-дългички RE).
        <em>re.А</em> (re.ASCII)      &mdash; кара \w, \W, \b, \B, \d, \D да отговарят на съответните ASCII-класове.


= slide "Кодът на matcher() " do
    example:
        def matcher(regex, string):
            match = re.search(regex, string)
            if match is None: return string
            start, end = match.span()
            return string[:start]
                   + '(' + string[start:end] + ')' +
                   string[end:]


= slide "На финалната права... " do
    list:
        Как да определим дали едно число е просто с регулярен израз?
         <em>'prime' if not re.search(<някакъв шаблон>, '1' * <число>) else 'not prime'</em>
        Шаблонът: <em>r'^1?$|^(11+?)\1+$'</em>. Въпроси?
